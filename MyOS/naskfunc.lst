     1 00000000                                 ; naskfunc
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]	
     5 00000000                                 [INSTRSET "i486p"]				; i486 architecture
     6 00000000                                 [BITS 32]						; 32 bit program
     7 00000000                                 [FILE "naskfunc.nas"]			; File name
     8 00000000                                 		; Global Symbols
     9 00000000                                 		GLOBAL	_io_hlt, _io_cli, _io_sti, _io_stihlt
    10 00000000                                 		GLOBAL	_io_in8,  _io_in16,  _io_in32
    11 00000000                                 		GLOBAL	_io_out8, _io_out16, _io_out32
    12 00000000                                 		GLOBAL	_io_load_eflags, _io_store_eflags
    13 00000000                                 		GLOBAL	_load_gdtr, _load_idtr, _load_tr
    14 00000000                                 		GLOBAL	_load_cr0, _store_cr0
    15 00000000                                 		GLOBAL	_asm_inthandler20, _asm_inthandler21;,_asm_inthandler27
    16 00000000                                 		GLOBAL  _asm_inthandler2c
    17 00000000                                 		GLOBAL  _memtest_sub
    18 00000000                                 		GLOBAL  _farjmp
    19 00000000                                 		EXTERN	_inthandler20, _inthandler21, _inthandler2c;, _inthandler27
    20 00000000                                 		
    21                                          [SECTION .text]
    22 00000000                                 
    23 00000000                                 _io_hlt:	; void io_hlt(void);
    24 00000000 F4                              		HLT
    25 00000001 C3                              		RET
    26 00000002                                 
    27 00000002                                 _io_cli:	; void io_cli(void);
    28 00000002 FA                              		CLI
    29 00000003 C3                              		RET
    30 00000004                                 
    31 00000004                                 _io_sti:	; void io_sti(void);
    32 00000004 FB                              		STI
    33 00000005 C3                              		RET
    34 00000006                                 
    35 00000006                                 _io_stihlt:	; void io_stihlt(void);
    36 00000006 FB                              		STI
    37 00000007 F4                              		HLT
    38 00000008 C3                              		RET
    39 00000009                                 
    40 00000009                                 _io_in8:	; int io_in8(int port);
    41 00000009 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    42 0000000D B8 00000000                     		MOV		EAX,0
    43 00000012 EC                              		IN		AL,DX
    44 00000013 C3                              		RET
    45 00000014                                 
    46 00000014                                 _io_in16:	; int io_in16(int port);
    47 00000014 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    48 00000018 B8 00000000                     		MOV		EAX,0
    49 0000001D 66 ED                           		IN		AX,DX
    50 0000001F C3                              		RET
    51 00000020                                 
    52 00000020                                 _io_in32:	; int io_in32(int port);
    53 00000020 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    54 00000024 ED                              		IN		EAX,DX
    55 00000025 C3                              		RET
    56 00000026                                 
    57 00000026                                 _io_out8:	; void io_out8(int port, int data);
    58 00000026 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    59 0000002A 8A 44 24 08                     		MOV		AL,[ESP+8]		; data
    60 0000002E EE                              		OUT		DX,AL
    61 0000002F C3                              		RET
    62 00000030                                 
    63 00000030                                 _io_out16:	; void io_out16(int port, int data);
    64 00000030 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    65 00000034 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    66 00000038 66 EF                           		OUT		DX,AX
    67 0000003A C3                              		RET
    68 0000003B                                 
    69 0000003B                                 _io_out32:	; void io_out32(int port, int data);
    70 0000003B 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    71 0000003F 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    72 00000043 EF                              		OUT		DX,EAX
    73 00000044 C3                              		RET
    74 00000045                                 
    75 00000045                                 _io_load_eflags:	; int io_load_eflags(void);
    76 00000045 9C                              		PUSHFD		; PUSH EFLAGS 
    77 00000046 58                              		POP		EAX
    78 00000047 C3                              		RET
    79 00000048                                 
    80 00000048                                 _io_store_eflags:	; void io_store_eflags(int eflags);
    81 00000048 8B 44 24 04                     		MOV		EAX,[ESP+4]
    82 0000004C 50                              		PUSH	EAX
    83 0000004D 9D                              		POPFD		; POP EFLAGS 
    84 0000004E C3                              		RET
    85 0000004F                                 		
    86 0000004F                                 _load_gdtr:		; void load_gdtr(int limit, int addr);
    87 0000004F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    88 00000054 66 89 44 24 06                  		MOV		[ESP+6],AX
    89 00000059 0F 01 54 24 06                  		LGDT	[ESP+6]
    90 0000005E C3                              		RET
    91 0000005F                                 
    92 0000005F                                 _load_idtr:		; void load_idtr(int limit, int addr);
    93 0000005F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    94 00000064 66 89 44 24 06                  		MOV		[ESP+6],AX
    95 00000069 0F 01 5C 24 06                  		LIDT	[ESP+6]
    96 0000006E C3                              		RET
    97 0000006F                                 
    98 0000006F                                 _load_tr:		; void load_tr(int tr);
    99 0000006F 0F 00 5C 24 04                  		LTR		[ESP+4]			; tr
   100 00000074 C3                              		RET
   101 00000075                                 
   102 00000075                                 _asm_inthandler20:
   103 00000075 06                              		PUSH		ES
   104 00000076 1E                              		PUSH		DS
   105 00000077 60                              		PUSHAD
   106 00000078 89 E0                           		MOV		EAX,ESP
   107 0000007A 50                              		PUSH		EAX
   108 0000007B 66 8C D0                        		MOV		AX,SS
   109 0000007E 8E D8                           		MOV		DS,AX
   110 00000080 8E C0                           		MOV		ES,AX
   111 00000082 E8 [00000000]                   		CALL	_inthandler20
   112 00000087 58                              		POP		EAX
   113 00000088 61                              		POPAD
   114 00000089 1F                              		POP		DS
   115 0000008A 07                              		POP		ES
   116 0000008B CF                              		IRETD
   117 0000008C                                 
   118 0000008C                                 _asm_inthandler21:
   119 0000008C 06                              		PUSH		ES
   120 0000008D 1E                              		PUSH		DS
   121 0000008E 60                              		PUSHAD
   122 0000008F 89 E0                           		MOV		EAX,ESP
   123 00000091 50                              		PUSH		EAX
   124 00000092 66 8C D0                        		MOV		AX,SS
   125 00000095 8E D8                           		MOV		DS,AX
   126 00000097 8E C0                           		MOV		ES,AX
   127 00000099 E8 [00000000]                   		CALL	_inthandler21
   128 0000009E 58                              		POP		EAX
   129 0000009F 61                              		POPAD
   130 000000A0 1F                              		POP		DS
   131 000000A1 07                              		POP		ES
   132 000000A2 CF                              		IRETD
   133 000000A3                                 
   134 000000A3                                 ;_asm_inthandler27:
   135 000000A3                                 		;PUSH		ES
   136 000000A3                                 		;PUSH		DS
   137 000000A3                                 		;PUSHAD
   138 000000A3                                 		;MOV		EAX,ESP
   139 000000A3                                 		;PUSH	EAX
   140 000000A3                                 		;MOV		AX,SS
   141 000000A3                                 		;MOV		DS,AX
   142 000000A3                                 		;MOV		ES,AX
   143 000000A3                                 		;CALL	_inthandler27
   144 000000A3                                 		;POP		EAX
   145 000000A3                                 		;POPAD
   146 000000A3                                 		;POP		DS
   147 000000A3                                 		;POP		ES
   148 000000A3                                 		;IRETD
   149 000000A3                                 
   150 000000A3                                 _asm_inthandler2c:
   151 000000A3 06                              		PUSH		ES
   152 000000A4 1E                              		PUSH		DS
   153 000000A5 60                              		PUSHAD
   154 000000A6 89 E0                           		MOV		EAX,ESP
   155 000000A8 50                              		PUSH	EAX
   156 000000A9 66 8C D0                        		MOV		AX,SS
   157 000000AC 8E D8                           		MOV		DS,AX
   158 000000AE 8E C0                           		MOV		ES,AX
   159 000000B0 E8 [00000000]                   		CALL	_inthandler2c
   160 000000B5 58                              		POP		EAX
   161 000000B6 61                              		POPAD
   162 000000B7 1F                              		POP		DS
   163 000000B8 07                              		POP		ES
   164 000000B9 CF                              		IRETD
   165 000000BA                                 		
   166 000000BA                                 _load_cr0:		; int load_cr0(void);
   167 000000BA 0F 20 C0                        		MOV		EAX,CR0
   168 000000BD C3                              		RET
   169 000000BE                                 
   170 000000BE                                 _store_cr0:		; void store_cr0(int cr0);
   171 000000BE 8B 44 24 04                     		MOV		EAX,[ESP+4]
   172 000000C2 0F 22 C0                        		MOV		CR0,EAX
   173 000000C5 C3                              		RET
   174 000000C6                                 		
   175 000000C6                                 ;/* Go through the memory to test its size <C_Version> */
   176 000000C6                                 ;unsigned int memtest_sub(unsigned int start, unsigned int end)
   177 000000C6                                 ;{
   178 000000C6                                 	;/* a: 1010 5: 0101 */
   179 000000C6                                 	;unsigned int i, *p, old, pat0 = 0xaa55aa55, pat1 = 0x55aa55aa;
   180 000000C6                                 	;/* Go through the memory in a MEMORY_STEP_SIZE block */
   181 000000C6                                 	;for (i = start; i <= end; i += MEMORY_STEP_SIZE) {
   182 000000C6                                 		;p = (unsigned int *) (i + MEMORY_STEP_SIZE - 4); // The end of the block
   183 000000C6                                 		;old = *p;			/* Store the current value */
   184 000000C6                                 		;*p = pat0;			/* Write pat0 */
   185 000000C6                                 		;*p ^= 0xffffffff;	/* ~pat0 */
   186 000000C6                                 		;if (*p != pat1) {	/* Test pat0: not valid */
   187 000000C6                                 ;not_memory:
   188 000000C6                                 			;*p = old;		/* Restore old */
   189 000000C6                                 			;break;
   190 000000C6                                 		;}
   191 000000C6                                 		;*p ^= 0xffffffff;	/* ~pat0 */
   192 000000C6                                 		;if (*p != pat0) {	/* Test pat0: not valid */
   193 000000C6                                 			;goto not_memory;
   194 000000C6                                 		;}
   195 000000C6                                 		;*p = old;			/* Restore pat0 */
   196 000000C6                                 	;}
   197 000000C6                                 	;return i;
   198 000000C6                                 ;}
   199 000000C6                                 
   200 000000C6                                 ; <ASM_Version>
   201 000000C6                                 ; The step size for going through the memory
   202 000000C6                                 
   203  = 00000400                              MEMORY_STEP_SIZE	EQU		0x400 ; 1 KB
   204 000000C6                                 
   205 000000C6                                 _memtest_sub:	;unsigned int memtest_sub(unsigned int start, unsigned int end);
   206 000000C6 57                              		PUSH	EDI						; We need EBX, ESI, EDI
   207 000000C7 56                              		PUSH	ESI
   208 000000C8 53                              		PUSH	EBX
   209 000000C9 BE AA55AA55                     		MOV		ESI,0xaa55aa55			; pat0 = 0xaa55aa55;
   210 000000CE BF 55AA55AA                     		MOV		EDI,0x55aa55aa			; pat1 = 0x55aa55aa;
   211 000000D3 8B 44 24 10                     		MOV		EAX,[ESP+12+4]			; i = start;
   212 000000D7                                 mts_loop:
   213 000000D7 89 C3                           		MOV		EBX,EAX
   214 000000D9 81 C3 000003FC                  		ADD		EBX,MEMORY_STEP_SIZE-4	; p = i + MEMORY_STEP_SIZE - 4;
   215 000000DF 8B 13                           		MOV		EDX,[EBX]				; old = *p;
   216 000000E1 89 33                           		MOV		[EBX],ESI				; *p = pat0;
   217 000000E3 83 33 FF                        		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   218 000000E6 3B 3B                           		CMP		EDI,[EBX]				; if (*p != pat1) goto fin;
   219 000000E8 75 18                           		JNE		mts_fin
   220 000000EA 83 33 FF                        		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   221 000000ED 3B 33                           		CMP		ESI,[EBX]				; if (*p != pat0) goto fin;
   222 000000EF 75 11                           		JNE		mts_fin
   223 000000F1 89 13                           		MOV		[EBX],EDX				; *p = old;
   224 000000F3 05 00000400                     		ADD		EAX,MEMORY_STEP_SIZE	; i += MEMORY_STEP_SIZE;
   225 000000F8 3B 44 24 14                     		CMP		EAX,[ESP+12+8]			; if (i <= end) goto mts_loop;
   226 000000FC 76 D9                           		JBE		mts_loop
   227 000000FE 5B                              		POP		EBX
   228 000000FF 5E                              		POP		ESI
   229 00000100 5F                              		POP		EDI
   230 00000101 C3                              		RET
   231 00000102                                 mts_fin:
   232 00000102 89 13                           		MOV		[EBX],EDX				; *p = old;
   233 00000104 5B                              		POP		EBX
   234 00000105 5E                              		POP		ESI
   235 00000106 5F                              		POP		EDI
   236 00000107 C3                              		RET
   237 00000108                                 
   238 00000108                                 _farjmp:	; void farjmp(int eip, int cs);
   239 00000108 FF 6C 24 04                     		JMP	FAR	[ESP+4]	; JMP cs:eip
   240 0000010C C3                              		RET