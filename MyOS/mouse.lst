     1 00000000                                 [FORMAT "WCOFF"]
     2 00000000                                 [INSTRSET "i486p"]
     3 00000000                                 [OPTIMIZE 1]
     4 00000000                                 [OPTION 1]
     5 00000000                                 [BITS 32]
     6 00000000                                 	EXTERN	_wait_KBC_sendready
     7 00000000                                 	EXTERN	_io_out8
     8 00000000                                 	EXTERN	_io_in8
     9 00000000                                 	EXTERN	_task_kernal
    10 00000000                                 	EXTERN	_fifo_put
    11 00000000                                 	EXTERN	_task_run
    12 00000000                                 [FILE "mouse.c"]
    13                                          [SECTION .text]
    14 00000000                                 	GLOBAL	_enable_mouse
    15 00000000                                 _enable_mouse:
    16 00000000 55                              	PUSH	EBP
    17 00000001 89 E5                           	MOV	EBP,ESP
    18 00000003 E8 [00000000]                   	CALL	_wait_KBC_sendready
    19 00000008 68 000000D4                     	PUSH	212
    20 0000000D 6A 64                           	PUSH	100
    21 0000000F E8 [00000000]                   	CALL	_io_out8
    22 00000014 E8 [00000000]                   	CALL	_wait_KBC_sendready
    23 00000019 68 000000F4                     	PUSH	244
    24 0000001E 6A 60                           	PUSH	96
    25 00000020 E8 [00000000]                   	CALL	_io_out8
    26 00000025 8B 45 08                        	MOV	EAX,DWORD [8+EBP]
    27 00000028 C6 40 03 00                     	MOV	BYTE [3+EAX],0
    28 0000002C C9                              	LEAVE
    29 0000002D C3                              	RET
    30 0000002E                                 	GLOBAL	_mouse_decode
    31 0000002E                                 _mouse_decode:
    32 0000002E 55                              	PUSH	EBP
    33 0000002F 89 E5                           	MOV	EBP,ESP
    34 00000031 56                              	PUSH	ESI
    35 00000032 53                              	PUSH	EBX
    36 00000033 8B 55 08                        	MOV	EDX,DWORD [8+EBP]
    37 00000036 8B 4D 0C                        	MOV	ECX,DWORD [12+EBP]
    38 00000039 89 CE                           	MOV	ESI,ECX
    39 0000003B 8A 42 03                        	MOV	AL,BYTE [3+EDX]
    40 0000003E 84 C0                           	TEST	AL,AL
    41 00000040 75 11                           	JNE	L3
    42 00000042 80 F9 FA                        	CMP	CL,-6
    43 00000045 74 06                           	JE	L12
    44 00000047                                 L11:
    45 00000047 31 C0                           	XOR	EAX,EAX
    46 00000049                                 L2:
    47 00000049 5B                              	POP	EBX
    48 0000004A 5E                              	POP	ESI
    49 0000004B 5D                              	POP	EBP
    50 0000004C C3                              	RET
    51 0000004D                                 L12:
    52 0000004D C6 42 03 01                     	MOV	BYTE [3+EDX],1
    53 00000051 EB F4                           	JMP	L11
    54 00000053                                 L3:
    55 00000053 3C 01                           	CMP	AL,1
    56 00000055 74 61                           	JE	L13
    57 00000057 3C 02                           	CMP	AL,2
    58 00000059 74 54                           	JE	L14
    59 0000005B 3C 03                           	CMP	AL,3
    60 0000005D 74 05                           	JE	L15
    61 0000005F 83 C8 FF                        	OR	EAX,-1
    62 00000062 EB E5                           	JMP	L2
    63 00000064                                 L15:
    64 00000064 8A 1A                           	MOV	BL,BYTE [EDX]
    65 00000066 81 E6 000000FF                  	AND	ESI,255
    66 0000006C 89 D8                           	MOV	EAX,EBX
    67 0000006E 88 4A 02                        	MOV	BYTE [2+EDX],CL
    68 00000071 83 E0 07                        	AND	EAX,7
    69 00000074 89 72 08                        	MOV	DWORD [8+EDX],ESI
    70 00000077 89 42 0C                        	MOV	DWORD [12+EDX],EAX
    71 0000007A 88 D8                           	MOV	AL,BL
    72 0000007C 0F B6 4A 01                     	MOVZX	ECX,BYTE [1+EDX]
    73 00000080 83 E0 10                        	AND	EAX,16
    74 00000083 89 4A 04                        	MOV	DWORD [4+EDX],ECX
    75 00000086 C6 42 03 01                     	MOV	BYTE [3+EDX],1
    76 0000008A 84 C0                           	TEST	AL,AL
    77 0000008C 74 09                           	JE	L9
    78 0000008E 81 C9 FFFFFF00                  	OR	ECX,-256
    79 00000094 89 4A 04                        	MOV	DWORD [4+EDX],ECX
    80 00000097                                 L9:
    81 00000097 83 E3 20                        	AND	EBX,32
    82 0000009A 84 DB                           	TEST	BL,BL
    83 0000009C 74 07                           	JE	L10
    84 0000009E 81 4A 08 FFFFFF00               	OR	DWORD [8+EDX],-256
    85 000000A5                                 L10:
    86 000000A5 F7 5A 08                        	NEG	DWORD [8+EDX]
    87 000000A8 B8 00000001                     	MOV	EAX,1
    88 000000AD EB 9A                           	JMP	L2
    89 000000AF                                 L14:
    90 000000AF 88 4A 01                        	MOV	BYTE [1+EDX],CL
    91 000000B2 C6 42 03 03                     	MOV	BYTE [3+EDX],3
    92 000000B6 EB 8F                           	JMP	L11
    93 000000B8                                 L13:
    94 000000B8 83 E6 C8                        	AND	ESI,-56
    95 000000BB 89 F0                           	MOV	EAX,ESI
    96 000000BD 3C 08                           	CMP	AL,8
    97 000000BF 75 86                           	JNE	L11
    98 000000C1 88 0A                           	MOV	BYTE [EDX],CL
    99 000000C3 C6 42 03 02                     	MOV	BYTE [3+EDX],2
   100 000000C7 E9 FFFFFF7B                     	JMP	L11
   101 000000CC                                 	GLOBAL	_inthandler2c
   102 000000CC                                 _inthandler2c:
   103 000000CC 55                              	PUSH	EBP
   104 000000CD 89 E5                           	MOV	EBP,ESP
   105 000000CF 6A 64                           	PUSH	100
   106 000000D1 68 000000A0                     	PUSH	160
   107 000000D6 E8 [00000000]                   	CALL	_io_out8
   108 000000DB 6A 62                           	PUSH	98
   109 000000DD 6A 20                           	PUSH	32
   110 000000DF E8 [00000000]                   	CALL	_io_out8
   111 000000E4 6A 60                           	PUSH	96
   112 000000E6 E8 [00000000]                   	CALL	_io_in8
   113 000000EB 0F B6 C0                        	MOVZX	EAX,AL
   114 000000EE 05 00000100                     	ADD	EAX,256
   115 000000F3 50                              	PUSH	EAX
   116 000000F4 A1 [00000000]                   	MOV	EAX,DWORD [_task_kernal]
   117 000000F9 83 C0 10                        	ADD	EAX,16
   118 000000FC 50                              	PUSH	EAX
   119 000000FD E8 [00000000]                   	CALL	_fifo_put
   120 00000102 6A 00                           	PUSH	0
   121 00000104 6A FF                           	PUSH	-1
   122 00000106 FF 35 [00000000]                	PUSH	DWORD [_task_kernal]
   123 0000010C E8 [00000000]                   	CALL	_task_run
   124 00000111 C9                              	LEAVE
   125 00000112 C3                              	RET
