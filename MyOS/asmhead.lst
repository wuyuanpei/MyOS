     1 00000000                                 ; MyOS boot asm
     2 00000000                                 ; TAB = 4
     3 00000000                                 [INSTRSET "i486p"]				; using 486 instruction set
     4 00000000                                 
     5  = 00000000                              VBEMODE	EQU		0x0
     6 00000000                                 ;	0x100 :  640 x  400 x 8bit
     7 00000000                                 ;	0x101 :  640 x  480 x 8bit
     8 00000000                                 ;	0x103 :  800 x  600 x 8bit
     9 00000000                                 ;	0x105 : 1024 x  768 x 8bit
    10 00000000                                 ;	0x107 : 1280 x 1024 x 8bit
    11 00000000                                 
    12  = 00280000                              BOTPAK	EQU		0x00280000		; Bootpack Address
    13  = 00100000                              DSKCAC	EQU		0x00100000		; Disk in the memory address
    14  = 00008000                              DSKCAC0	EQU		0x00008000		; Disk in the memory address (real mode)
    15 00000000                                 
    16 00000000                                 ; BOOT_INFO
    17  = 00000FF0                              CYLS	EQU		0x0ff0			; Number of sectors loaded
    18  = 00000FF1                              LEDS	EQU		0x0ff1			; Keyboard status
    19  = 00000FF2                              VMODE	EQU		0x0ff2			; Info for color mode
    20  = 00000FF4                              SCRNX	EQU		0x0ff4			; x solution
    21  = 00000FF6                              SCRNY	EQU		0x0ff6			; y solution
    22  = 00000FF8                              VRAM	EQU		0x0ff8			; Starting address of Display Buffer
    23 00000000                                 
    24                                          		ORG		0xc200		; Starting address of the boot program
    25 0000C200                                 
    26 0000C200                                 ; Set up the screen
    27 0000C200                                 ; If VBEMODE not set
    28 0000C200 B8 0000                         		MOV		AX,VBEMODE
    29 0000C203 85 C0                           		TEST		AX,AX
    30 0000C205 74 64                           		JE		scrn320
    31 0000C207                                 ; Check VBE
    32 0000C207 B8 9000                         		MOV		AX,0x9000
    33 0000C20A 8E C0                           		MOV		ES,AX
    34 0000C20C BF 0000                         		MOV		DI,0		; ES:DI temporary address to store VBE information
    35 0000C20F B8 4F00                         		MOV		AX,0x4f00
    36 0000C212 CD 10                           		INT		0x10
    37 0000C214 3D 004F                         		CMP		AX,0x004f	; If VBE exists, AX will become 0x004f
    38 0000C217 75 52                           		JNE		scrn320		; Else we have to use 320 x 200
    39 0000C219                                 
    40 0000C219                                 ; Check VBE version
    41 0000C219 26 8B 45 04                     		MOV		AX,[ES:DI+4]	; 
    42 0000C21D 3D 0200                         		CMP		AX,0x0200
    43 0000C220 72 49                           		JB		scrn320		; If AX < 0x200 (VBE version < 2.0)
    44 0000C222                                 
    45 0000C222                                 ; Check whether VBEMODE is feasible
    46 0000C222 B9 0000                         		MOV		CX,VBEMODE
    47 0000C225 B8 4F01                         		MOV		AX,0x4f01
    48 0000C228 CD 10                           		INT		0x10
    49 0000C22A 3D 004F                         		CMP		AX,0x004f
    50 0000C22D 75 3C                           		JNE		scrn320		; Check whether VBEMODE is feasible
    51 0000C22F                                 
    52 0000C22F                                 ; Check VBE information
    53 0000C22F 26 80 7D 19 08                  		CMP		BYTE [ES:DI+0x19],8	; Color Number (has to be 8)
    54 0000C234 75 35                           		JNE		scrn320
    55 0000C236 26 80 7D 1B 04                  		CMP		BYTE [ES:DI+0x1b],4	; Palette Mode (has to be 4)
    56 0000C23B 75 2E                           		JNE		scrn320
    57 0000C23D 26 8B 05                        		MOV		AX,[ES:DI+0x00]		; Mode Property (bit7 has to be 1)
    58 0000C240 25 0080                         		AND		AX,0x0080
    59 0000C243 74 26                           		JZ		scrn320
    60 0000C245                                 
    61 0000C245                                 ; Use VBEMODE
    62 0000C245 BB 4000                         		MOV		BX,VBEMODE+0x4000
    63 0000C248 B8 4F02                         		MOV		AX,0x4f02		; VBE setup
    64 0000C24B CD 10                           		INT		0x10
    65 0000C24D C6 06 0FF2 08                   		MOV		BYTE [VMODE],8		; Screen mode
    66 0000C252 26 8B 45 12                     		MOV		AX,[ES:DI+0x12]
    67 0000C256 A3 0FF4                         		MOV		[SCRNX],AX		; xsize
    68 0000C259 26 8B 45 14                     		MOV		AX,[ES:DI+0x14]
    69 0000C25D A3 0FF6                         		MOV		[SCRNY],AX		; ysize
    70 0000C260 66 26 8B 45 28                  		MOV		EAX,[ES:DI+0x28]
    71 0000C265 66 A3 0FF8                      		MOV		[VRAM],EAX		; vram address
    72 0000C269 EB 20                           		JMP		keystatus
    73 0000C26B                                 
    74 0000C26B                                 
    75 0000C26B                                 ; Set up 320x200x8bit
    76 0000C26B                                 
    77 0000C26B                                 scrn320:	
    78 0000C26B B0 13                           		MOV		AL,0x13		; VGA, 320 x 200 x 8bit
    79 0000C26D B4 00                           		MOV		AH,0x00
    80 0000C26F CD 10                           		INT		0x10
    81 0000C271 C6 06 0FF2 08                   		MOV		BYTE [VMODE],8	; Screen mode
    82 0000C276 C7 06 0FF4 0140                 		MOV		WORD [SCRNX],320
    83 0000C27C C7 06 0FF6 00C8                 		MOV		WORD [SCRNY],200
    84 0000C282 66 C7 06 0FF8 000A0000          		MOV		DWORD [VRAM],0xa0000
    85 0000C28B                                 
    86 0000C28B                                 ; Use BIOS to get keyboard status
    87 0000C28B                                 
    88 0000C28B                                 keystatus:	
    89 0000C28B B4 02                           		MOV		AH,0x02
    90 0000C28D CD 16                           		INT		0x16 			; keyboard BIOS
    91 0000C28F A2 0FF1                         		MOV		[LEDS],AL
    92 0000C292                                 
    93 0000C292                                 ; Block PIC interrupt signals
    94 0000C292                                 
    95 0000C292 B0 FF                           		MOV		AL,0xff
    96 0000C294 E6 21                           		OUT		0x21,AL			; io_out(PIC0_IMR, 0xff);
    97 0000C296 90                              		NOP
    98 0000C297 E6 A1                           		OUT		0xa1,AL			; io_out(PIC1_IMR, 0xff);
    99 0000C299                                 
   100 0000C299 FA                              		CLI					; set IF in CPU
   101 0000C29A                                 
   102 0000C29A                                 ; Set A20GATE
   103 0000C29A                                 
   104 0000C29A E8 00B5                         		CALL	waitkbdout		; wait_KBC_sendready();
   105 0000C29D B0 D1                           		MOV		AL,0xd1
   106 0000C29F E6 64                           		OUT		0x64,AL
   107 0000C2A1 E8 00AE                         		CALL	waitkbdout
   108 0000C2A4 B0 DF                           		MOV		AL,0xdf		; enable A20 to support 32 bit memory
   109 0000C2A6 E6 60                           		OUT		0x60,AL
   110 0000C2A8 E8 00A7                         		CALL	waitkbdout
   111 0000C2AB                                 
   112 0000C2AB                                 ; real mode to protected mode
   113 0000C2AB 0F 01 16 C39A                   		LGDT	[GDTR0]			; set temporary GDT
   114 0000C2B0 0F 20 C0                        		MOV		EAX,CR0			; reset CR0 (Control Register 0)
   115 0000C2B3 66 25 7FFFFFFF                  		AND		EAX,0x7fffffff	; clear bit 31 (no paging)
   116 0000C2B9 66 83 C8 01                     		OR		EAX,0x00000001	; set bit  0 (to protected mode)
   117 0000C2BD 0F 22 C0                        		MOV		CR0,EAX
   118 0000C2C0 EB 00                           		JMP		pipelineflush	; JMP after CR0 reset
   119 0000C2C2                                 pipelineflush:
   120 0000C2C2 B8 0008                         		MOV		AX,8			; reset all segment registers (except cs)
   121 0000C2C5 8E D8                           		MOV		DS,AX			; set all of them to 0x8 (i.e. gdt+1)
   122 0000C2C7 8E C0                           		MOV		ES,AX
   123 0000C2C9 8E E0                           		MOV		FS,AX
   124 0000C2CB 8E E8                           		MOV		GS,AX
   125 0000C2CD 8E D0                           		MOV		SS,AX
   126 0000C2CF                                 
   127 0000C2CF                                 ; store bootpack
   128 0000C2CF                                 
   129 0000C2CF 66 BE 0000C3A0                  		MOV		ESI,bootpack	; origin
   130 0000C2D5 66 BF 00280000                  		MOV		EDI,BOTPAK		; destination
   131 0000C2DB 66 B9 00020000                  		MOV		ECX,512*1024/4	; 512KB
   132 0000C2E1 E8 0077                         		CALL	memcpy
   133 0000C2E4                                 
   134 0000C2E4                                 ; store disk content
   135 0000C2E4                                 
   136 0000C2E4                                 ; boot area (IPL)
   137 0000C2E4                                 
   138 0000C2E4 66 BE 00007C00                  		MOV		ESI,0x7c00		; origin
   139 0000C2EA 66 BF 00100000                  		MOV		EDI,DSKCAC		; destination
   140 0000C2F0 66 B9 00000080                  		MOV		ECX,512/4		; 512B
   141 0000C2F6 E8 0062                         		CALL	memcpy
   142 0000C2F9                                 
   143 0000C2F9                                 ; other stuff in the disk
   144 0000C2F9                                 
   145 0000C2F9 66 BE 00008200                  		MOV		ESI,DSKCAC0+512	; origin
   146 0000C2FF 66 BF 00100200                  		MOV		EDI,DSKCAC+512	; destination
   147 0000C305 66 B9 00000000                  		MOV		ECX,0
   148 0000C30B 8A 0E 0FF0                      		MOV		CL,BYTE [CYLS]
   149 0000C30F 66 69 C9 00001200               		IMUL	ECX,512*18*2/4	; CYLS*SECTOR_SIZE*SECTOR*HEAD/4
   150 0000C316 66 81 E9 00000080               		SUB		ECX,512/4		; Minus IPL
   151 0000C31D E8 003B                         		CALL	memcpy
   152 0000C320                                 
   153 0000C320                                 ; asmhead finished here, ready to start bootpack
   154 0000C320                                 
   155 0000C320                                 ; start bootpack
   156 0000C320                                 
   157 0000C320 66 BB 00280000                  		MOV		EBX,BOTPAK
   158 0000C326 67 66 8B 4B 10                  		MOV		ECX,[EBX+16]
   159 0000C32B 66 83 C1 03                     		ADD		ECX,3			; ECX += 3;
   160 0000C32F 66 C1 E9 02                     		SHR		ECX,2			; ECX /= 4;
   161 0000C333 74 10                           		JZ		skip			; No need to copy data, go to the start of bootpack
   162 0000C335 67 66 8B 73 14                  		MOV		ESI,[EBX+20]
   163 0000C33A 66 01 DE                        		ADD		ESI,EBX			; origin
   164 0000C33D 67 66 8B 7B 0C                  		MOV		EDI,[EBX+12]	; destination
   165 0000C342 E8 0016                         		CALL	memcpy
   166 0000C345                                 skip:
   167 0000C345 67 66 8B 63 0C                  		MOV		ESP,[EBX+12]	; initial stack address
   168 0000C34A 66 EA 0000001B 0010             		JMP		DWORD 2*8:0x0000001b	; start bootpack (second segment, 0x1b offset)
   169 0000C352                                 
   170 0000C352                                 waitkbdout:						; wait_KBC_sendready();
   171 0000C352 E4 64                           		IN		 AL,0x64
   172 0000C354 24 02                           		AND		 AL,0x02
   173 0000C356 E4 60                           		IN		 AL,0x60		; empty rubbish data in keyboard
   174 0000C358 75 F8                           		JNZ		waitkbdout
   175 0000C35A C3                              		RET
   176 0000C35B                                 
   177 0000C35B                                 memcpy:							; store [ESI] to [EDI] (4 bit wise)
   178 0000C35B 67 66 8B 06                     		MOV		EAX,[ESI]
   179 0000C35F 66 83 C6 04                     		ADD		ESI,4
   180 0000C363 67 66 89 07                     		MOV		[EDI],EAX
   181 0000C367 66 83 C7 04                     		ADD		EDI,4
   182 0000C36B 66 83 E9 01                     		SUB		ECX,1
   183 0000C36F 75 EA                           		JNZ		memcpy
   184 0000C371 C3                              		RET
   185 0000C372                                 		
   186 0000C372 00 00 00 00 00 00 00 00 00 00   		ALIGNB	16
       0000C37C 00 00 00 00 
   187 0000C380                                 GDT0:
   188 0000C380 00 00 00 00 00 00 00 00         		RESB	8				; NULL Selector (empty region for gdt0)
   189 0000C388                                 		; set_segmdesc(gdt + 1, 0xffffffff, 0x00000000, AR_DATA32_RW); // All memory
   190 0000C388 FFFF 0000 9200 00CF             		DW		0xffff,0x0000,0x9200,0x00cf	
   191 0000C390                                 		; set_segmdesc(gdt + 2, LIMIT_BOTPAK, ADR_BOTPAK, AR_CODE32_ER); // For bootpack
   192 0000C390 FFFF 0000 9A28 0047             		DW		0xffff,0x0000,0x9a28,0x0047	
   193 0000C398                                 
   194 0000C398 0000                            		DW		0
   195 0000C39A                                 GDTR0:					; Note GDTR has 48 bits
   196 0000C39A 0017                            		DW		8*3-1	; three entries in temporary GDT
   197 0000C39C 0000C380                        		DD		GDT0	; addr of temporary GDT
   198 0000C3A0                                 
   199 0000C3A0                                 		ALIGNB	16
   200 0000C3A0                                 bootpack:
